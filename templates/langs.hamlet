<h1>
  Language Support Overview
<br />
<table .table .table-striped .table-bordered style="font-size: 0.6em">
  <thead>
    <tr style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
        Types
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none; background-color: #222; color: #fff">
        Server
      <th scope="col" style="border:none; background-color: #222; color: #fff">
      <th scope="col" style="border:none; background-color: #222; color: #fff">
      <th scope="col" style="border:none; background-color: #222; color: #fff">
      <th scope="col" style="border:none">
        Client
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none">
      <th scope="col" style="border:none; background-color: #222; color: #fff">
        Docs
    <tr>
      <th scope="col">
        Lang
      <th scope="col">
        Unit
      <th scope="col">
        Bool
      <th scope="col">
        Int
      <th scope="col">
        Float
      <th scope="col">
        Char
      <th scope="col">
        String
      <th scope="col">
        Option
      <th scope="col">
        Either
      <th scope="col">
        List
      <th scope="col">
        Wrap
      <th scope="col">
        Struct
      <th scope="col">
        Enum
      <th scope="col">
        JSON
      <th scope="col">
        Gen
      <th scope="col">
        Lib
      <th scope="col">
        HTTP
      <th scope="col">
        WS
      <th scope="col">
        Gen
      <th scope="col">
        Lib
      <th scope="col">
        HTTP
      <th scope="col">
        WS
      <th scope="col">
        Gen
  <tbody>
    <tr>
      <td>Clojure
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
    <tr>
      <td>C++
      <td><code>void</code>/?
      <td><code>bool
      <td><code>int32_t
      <td><code>double
      <td><code>char
      <td><code>string
      <td><code>optional
      <td><code>variant
      <td><code>vector
      <td><code>using
      <td><code>struct
      <td>Tagged unions
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        Crystal
      <td><code><a href="https://github.com/crystal-lang/crystal/pull/2701">Void
      <td><code>Bool
      <td><code>Int32
      <td><code>Float32
      <td><code>Char
      <td><code>String
      <td><code>a&nbsp;|&nbsp;Nil</code>
      <td><code>a&nbsp;|&nbsp;b</code>
      <td><code><a href="https://crystal-lang.org/api/0.24.1/Array.html">Array
      <td>?
      <td><code>struct</code>
      <td><a href="https://crystal-lang.org/docs/syntax_and_semantics/union_types.html">Union type
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>C&#35;
      <td><code>void</code>/?
      <td><code>bool
      <td><code>int
      <td><code>double
      <td><code>char
      <td><code>string
      <td><code>Option
      <td><code>Either
      <td><code>ArraryList
      <td>?
      <td><code>public struct
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>D
      <td><code>void</code>/?
      <td><code>bool
      <td><code>int
      <td><code>double
      <td><code>char
      <td><code>String
      <td><code>Nullable!
      <td><code>Algebraic!
      <td><code>DList!
      <td>?
      <td><code>struct
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>Elm
      <td><code>()
      <td><code>Bool
      <td><code>Int
      <td><code>Double
      <td><code>Char
      <td><code>String
      <td><code>Maybe
      <td><code>Either
      <td><code>List
      <td>?
      <td><code>type
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>F&#35;
      <td><code>unit
      <td><code>bool
      <td><code>int
      <td><code>float
      <td><code>char
      <td><code>string
      <td><code>Option
      <td><code>Either
      <td><code>List
      <td>?
      <td><code>type
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>Go
      <td><code>void</code>/?
      <td><code>bool
      <td><code>int32
      <td><code>float64
      <td><code>char
      <td><code>string
      <td><code>*</code>/?
      <td><code>Either</code>/?
      <td><code>List
      <td>?
      <td><code>type a struct
      <td><a href="https://github.com/golang/go/issues/19412">?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td><a href="https://github.com/jxv/fluid-haskell">Haskell
      <td><code>()
      <td><code><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#t:Bool">Bool
      <td><code><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#t:Int">Int
      <td><code><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#t:Double">Double
      <td><code><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#t:Char">Char
      <td><code><a href="https://hackage.haskell.org/package/text-1.2.3.0/docs/Data-Text.html#t:Text">Text
      <td><code><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#t:Maybe">Maybe
      <td><code><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#t:Either">Either
      <td><code>[]
      <td><code><a href="https://wiki.haskell.org/Newtype">newtype
      <td><a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses#record-syntax">Record
      <td><a href="https://wiki.haskell.org/Algebraic_data_type">ADT
      <td><a href="https://hackage.haskell.org/package/aeson">Aeson
      <td>Yes
      <td>Yes
      <td><a href="https://github.com/jxv/fluid/issues/23">Yes
      <td><a href="https://github.com/jxv/fluid/issues/24">NYI
      <td>Yes
      <td>Yes
      <td><a href="https://github.com/jxv/fluid/issues/25">Yes
      <td><a href="https://github.com/jxv/fluid/issues/26">NYI
      <td>?
    <tr>
      <td>Haxe
      <td><code>Void
      <td><code>Bool
      <td><code>Int
      <td><code>Float
      <td><code>String
      <td><code>String
      <td><code>Null
      <td><code>Either
      <td><code>Array
      <td>?
      <td><code>class
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>Idris
      <td><code>()
      <td><code>Bool
      <td><code>Int
      <td><code>Double
      <td><code>Char
      <td><code>String
      <td><code>Maybe
      <td><code>Either
      <td><code>List
      <td>?
      <td><code>record
      <td>?
      <td><code><a href="https://github.com/ziman/lightyear">lightyear
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>Java
      <td><code>void</code>/?
      <td><code>Boolean</code>
      <td><code>Integer</code>
      <td><code>Double</code>
      <td><code>Char</code>
      <td><code>String</code>
      <td><code>Optional</code>
      <td><code>Either</code>
      <td><code>ArrayList</code>
      <td>?
      <td><code>public class</code>
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        JavaScript
      <td>null
      <td>boolean
      <td>number
      <td>number
      <td>string
      <td>string
      <td>null
      <td>Tagged&nbsp;unions
      <td><a href="https://www.javascript.com/learn/javascript/arrays">Array
      <td>N/A
      <td><code>{}
      <td>Tagged&nbsp;unions
      <td>Native
      <td>-
      <td>-
      <td>-
      <td>-
      <td>WIP
      <td>WIP
      <td>WIP
      <td>NYI
      <td>?
    <tr>
      <td>
        Kotlin
      <td><code>Unit
      <td><code>Boolean
      <td><code>Int
      <td><code>Double
      <td><code>Char
      <td><code>String
      <td><code>?
      <td><code>Either
      <td><code>List
      <td>?
      <td><code>data class
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        Nim
      <td><code>void</code>/?
      <td><code>bool
      <td><code>int32
      <td><code>float64
      <td><code>char
      <td><code>string
      <td><code><a href="https://github.com/vegansk/nimfp/blob/master/src/fp/option.nim">Option*
      <td><code><a href="https://github.com/vegansk/nimfp/blob/master/src/fp/either.nim">Either*
      <td><code><a href="https://nim-by-example.github.io/seqs/">seq
      <td><a href="https://nim-by-example.github.io/types/distinct/">distinct
      <td><a href="https://nim-by-example.github.io/types/objects/">object
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        Node
      <td>null
      <td>boolean
      <td>boolean
      <td>number
      <td>number
      <td>string
      <td>string
      <td>Tagged&nbsp;unions
      <td>Array
      <td>N/A
      <td><code>{}
      <td>Tagged&nbsp;unions
      <td>Native
      <td>-
      <td>-
      <td>-
      <td>-
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        OCaml
      <td><code>unit
      <td><code>bool
      <td><code>int
      <td><code>double
      <td><code>char
      <td><code>string
      <td><code>maybe
      <td><code>result
      <td><code>list
      <td>?
      <td><code>type
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        PureScript
      <td><code>()
      <td><code>Boolean
      <td><code>Int
      <td><code>Number
      <td><code>Char
      <td><code>String
      <td><code>Maybe
      <td><code>Either
      <td><code>List
      <td>?
      <td>Record
      <td>ADT
      <td><a href="https://github.com/purescript-contrib/purescript-argonaut">argonaut
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        Python
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
    <tr>
      <td>
        Reason
      <td><code>void
      <td><code>bool
      <td><code>int
      <td><code>float
      <td><code>string
      <td><code>option
      <td><code>either
      <td><code>list
      <td>?
      <td><a href="https://reasonml.github.io/docs/en/record.html">Record
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        Ruby
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
    <tr>
      <td>
        Rust
      <td><code>()
      <td><code>bool
      <td><code>i32
      <td><code>f64
      <td><code>char
      <td><code>str
      <td><code>Option
      <td><code>Result
      <td><code>LinkedList
      <td><a href="https://doc.rust-lang.org/1.6.0/book/structs.html#tuple-structs">Tuple&nbsp;struct
      <td><a href="https://doc.rust-lang.org/1.6.0/book/structs.html#structs">Struct
      <td><a href="https://doc.rust-lang.org/book/first-edition/enums.html">Enum
      <td><a href="https://github.com/serde-rs/json">serde_json
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        Scala
      <td><code>Unit
      <td><code>Boolean
      <td><code>Int
      <td><code>Double
      <td><code>Char
      <td><code>String
      <td><code>Option
      <td><code>Either
      <td><code>Array
      <td>?
      <td>case&nbsp;class
      <td>sealed&nbsp;traits
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        Swift
      <td><code>Void
      <td><code>Bool
      <td><code>Int
      <td><code>Double
      <td><code>Char
      <td><code>String
      <td><code>?
      <td><code>Either
      <td><code>[]
      <td><code>typealias
      <td><code>struct
      <td><code><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html">enum
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
    <tr>
      <td>
        TypeScript
      <td><code>void</code>/?
      <td><code>boolean
      <td><code>number
      <td><code>numner
      <td><code>string
      <td><code>string
      <td><code>(a&nbsp;|&nbsp;null)
      <td><code>(a&nbsp;|&nbsp;b)
      <td><code>Array
      <td>?
      <td><code>interface
      <td>?
      <td>?
      <td>WIP
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>NYI
      <td>?
