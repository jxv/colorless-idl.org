<h1>
  Spec
<br />

<h2>
  Example: Hello World

<table .table .table-striped .table-condensed .table-bordered>
  <tbody>
    <tr>
      <td>
        <code style="background-color: transparent">
          {<br/>
          &nbsp;&nbsp;"fluid":{"major":0, "minor":0},<br />
          &nbsp;&nbsp;"schema":[<br />
          &nbsp;&nbsp;&nbsp;&nbsp;{"n":"Hello", "m":[{"who":"String"}], "o": "String"}<br />
          &nbsp;&nbsp;],<br />
          &nbsp;&nbsp;"pull": {<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"name": "HelloWorld",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"error": "Unit",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"meta": "Unit",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"protocol": "http",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"host": "localhost",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"port": 8080<br />
          &nbsp;&nbsp;}<br />
          }

<br />

<table .table .table-striped .table-condensed .table-bordered>
  <thead>
    <tr>
      <th>
        Field
      <th>
        Description
      <th>
        Example
  <tbody>
    <tr>
      <td>
        <code>"fluid"
      <td>
        Version of the transport with Fluid.
      <td>
        <code>{"major":0,"minor":0}
    <tr>
      <td>
        <code>"version"
      <td>
        Not required. Version of the API. Forces version when present.
      <td>
        <code>{"major":0,"minor":0}
    <tr>
      <td>
        <code>"pull"
      <td>
        Configuration for RPC style queries.
      <td>
        See below
    <tr>
      <td>
        <code>"schema"
      <td>
        All the types and functions within the API.
      <td>
        See below

<h2>
  Types

<table .table .table-striped .table-condensed .table-bordered>
  <thead>
    <tr>
      <th>
        Name
      <th>
        Description
      <th>
        Schema Type (JSON)
  <tbody>
    <tr>
      <td>
        Unit
      <td>
        Non-meaningful value
      <td>
        <code>
          "Unit"

    <tr>
      <td>
        Int
      <td>
        32-bit integer
      <td>
        <code>
          "Int"

    <tr>
      <td>
        Float
      <td>
        64-bit floating point
      <td>
        <code>
          "Float"

    <tr>
      <td>
        Char
      <td>
        Character supporting unicode
      <td>
        <code>
          "Char"

    <tr>
      <td>
        String
      <td>
        String of text supporting unicode
      <td>
        <code>
          "String"

    <tr>
      <td>
        Option
      <td>
        Represents possible existence of a value (a.k.a. Nullable, Maybe, and Optional)
      <td>
        <code>
          {"n":"Option", "p":&lt;Type&gt;}

    <tr>
      <td>
        Either
      <td>
        Represents one of two possible values (a.k.a. Result)
      <td>
        <code>
          {"n":"Either", "p":[&lt;Type&gt;,&lt;Type&gt;]}

    <tr>
      <td>
        List
      <td>
        List of values
      <td>
        <code>
          {"n":"List", "p":&lt;Type&gt;}
<h2>
  Pull (RPC-styled messaging) Configuration
<table .table .table-striped .table-condensed .table-bordered>
  <thead>
    <tr>
      <th>Field
      <th>Description
      <th>Example
  <tbody>

    <tr>
      <td><code>"name"
      <td>Name of the service.
      <td><code>"HelloWorld"
    <tr>
      <td><code>"protocol"
      <td>Protocol which the request will take place.
      <td><code>"http"
    <tr>
      <td><code>"host"
      <td>Location the request will target.
      <td><code>"127.0.0.1"
    <tr>
      <td><code>"path"
      <td>As it pertains to HTTP, the targeted endpoint.
      <td><code>"/"
    <tr>
      <td><code>"port"
      <td>Port the of the address.
      <td><code>8000
    <tr>
      <td><code>"meta"
      <td>Similar to the usage of HTTP headers,
          such that it represents extra data that's attached to each request.
          Values for identification is possible.
      <td><code>"Unit"
    <tr>
      <td><code>"error"
      <td>Potential error type if the request or query were to fail.
      <td><code>"Unit"
<h2>
  Schema

<table .table .table-striped .table-condensed .table-bordered>
  <thead>
    <tr>
      <th>Name
      <th>Example
  <tbody>
    <tr>
      <td>Wrap
      <td><code>{"n":"Name","w":"String"}
    <tr>
      <td>Struct
      <td><code>{"n":"Point","m":[{"x":"Int"},{"y":"Int"}]}
    <tr>
      <td>Enum
      <td>
        <code style="background-color: transparent">
          {<br/>
          &nbsp;&nbsp;"n":"Color",<br />
          &nbsp;&nbsp;"e":[<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"Red",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"Green",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;"Blue",<br />
          &nbsp;&nbsp;&nbsp;&nbsp;{"n":"Custom","m":[{"r":"Int"}, {"g":"Int"}, {"b":"Int"}]}<br />
          &nbsp;&nbsp;]<br />
          }
