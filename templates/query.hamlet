<div .container>
  <div .row>
    <div .col .col-md .col-md-10 .col-md-offset-1>
      <h1>
        Query

      <br />
      <br />

      <b>Fluid</b>'s <b>query language</b> is smart because it's a complete <b>programming language</b>.
      The <b>query language</b>, partially inspired by LISP, has its simple roots in functional programming.

      <br />
      <br />

      <h2> Request Body
      <br />

      Interaction with a <b>Fluid</b> <b>API</b> is through the <code>"query"</code> portion of the <b>JSON</b> request body.
      Code in the <b>query language</b> should be placed here.

      <br />
      <br />

      <table .table .table-striped .table-condensed .table-bordered>
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                {<br/>
                &nbsp;&nbsp;"fluid": {"major": 0, "minor": 0},<br/>
                &nbsp;&nbsp;"version": {"major": 0, "minor": 0},<br/>
                &nbsp;&nbsp;"meta": &lt;META_HERE&gt;,<br/>
                &nbsp;&nbsp;"query": <span style="background-color: #ff0">&lt;QUERY_HERE&gt;</span><br/>
                }
      <br />

      <h2> JSON
      <br />

      For better or worse, the <b>query language</b> is in <b>JSON</b>.
      <br />
      <br />
      There are few reasons to shape up <b>JSON</b> from a transport format into a programming language -- opposed to creating a <b>query language</b> with a different syntax.
      <br />
      <br />
      1. Many existing tools for dealing with Web <b>APIs</b> are designed with <b>JSON</b> in mind.
      And from a purely practical perspective, not all programming languages currently have a <b>Fluid</b> implementation.
      But all languages can interact with a <b>JSON</b>-based web <b>API</b>.
      This enforces an additional constraint for readable transport.
      <br />
      <br />
      2. Users of generated clients don't care about the transport format.
      And they shouldn't care (unless something goes wrong).
      There's no need to reinvent the wheel of another transport format.
      Moving away from <b>JSON</b> will only impede those with existing web tools and non-generated clients.
      <b>JSON</b> is the widely accepted norm.
      <br />
      <br />
      3. Because all languages can interact with a <b>JSON</b> <b>API</b>,
      each one has a unique and proven story (or stories) for serializing and deserializing the format.
      By using an existing transport format, an entire and crucial class of the work is avoided.
      <br />
      <br />
      These reasons, which commit that the transport format is a first-class priority, derive from worthy constraints.
      <b>JSON</b> adequately satisfies them.
      <br />
      <br />

      <h2> Sandboxed Runtimes
      <br />

      At the price of flexbility, running client code on the server can risk <b>vulernabilities</b>.
      Such code is sandboxed.
      The running code is under <b>full control</b> of the server with a few <b>hooks</b> in place.
      Each request's query is always sandboxed <b>separately</b>.
      Variables are <b>not</b> carried over into parallel or sequential requests.

      <br />
      <br />
      <h3> Authentication and Authorization
      <br />

      Because who sends the request should been know when restricting a sandbox's <b>limits</b>,
      request headers and the <code>"meta"</code> value, inside the request body, are passed through the <b>meta middleware</b>.
      <br />
      <br />
      This is the most flexible approach.
      The server already decides how to <b>authenticate</b> and <b>authorize</b> at runtime.
      Those rules are as <b>loose or strict</b> and as <b>static or dynamic</b> as desired.
      How that happens should remain a mystery to the sandboxed runtime.
      It's no business of any <b>API</b> code to directly deal with authentication and authorization logic.

      <br />
      <br />
      <h2>Built-in Types
      <br />

      As a small language, <b>Fluid</b> has its own idioms which work along with the nature of <b>JSON</b>.
      Any "shortcuts" taken are for readability for non-generating clients.
      Types are no exception.

      <h3> Collections
      <br />

      Builtin collection types contain other types.
      For example, a list type is a collection.
      It holds one or many values which can be mapped or iterated over.

      <br />
      <br />
      <h4> Option
      <br />

      Because every <b>JSON</b> value has the potential to be <code>null</code>, it's overloaded to represent the <code>None</code> of <code>Option</code> values.
      This follows a common pattern of <b>JSON</b> translations with static languages.
      From It simples the underlying <b>JSON</b> value in a <code>Some</code> just to be itself.
      Nonsensical and a rarity, nested <code>Option</code> types are discouraged.

      <br />
      <br />
      <h4> Tuple
      <br />

      <br />
      <br />
      <h4> List
      <br />

      <br />
      <br />
      <h4> Either
      <br />

      <br />
      <br />
      <h3> Primitives
      <br />
      <br />
      <h4> Unit
      <br />

      <code>Unit</code> is a type that means the absence of a meaningful value.
      The <b>JSON</b> <code>null</code> value overloads the value for this type too.
      <code>null</code> is the only acceptable value in transport.
      Most languages will represent this type with its unit, void, or some other null-like type.
      A junk char type could be used as last resort.

      <br />
      <br />
      <h4>Bool
      <br />

      Bool are represented by <code>true</code> and <code>false</code>.

      <br />
      <br />
      <h4>Char
      <br />

      Like in JavaScript, JSON uses string with a length of one to represent a character.
      But it is still a string. <code>"abc123"</code>

      <br />
      <br />
      <h4>String
      <br />

      <code>"one. two. three. I'm a string."</code>

      <br />
      <br />
      <h4>Int
      <br />

      <code>Int</code> is a 32-bit integer.
      The majority of languages have a 32-bit integer type, so the translation is straight-foward.
      In transport, it uses the <b>JSON</b> number representation.

      <br />
      <br />
      <h4>Float
      <br />

      <code>Float</code> is a 64-bit floating point.
      Like <code>Int</code>, the majority of languages have a 64-bit floating point type.
      In transport, it uses the <b>JSON</b> number representation as well.
      This is a proper overloaded usage.


      <br />
      <br />
      <h2> Built-in functions
      <br />
      <br />
      <h4>if
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["if", &lt;bool&gt;, &lt;expr on true&gt;, &lt;expr on false&gt;]
            <td>
              <code style="background-color: transparent">
                ["if", true, ["addInt", 1, 2], ["addInt", 3, 5]]
          <tr>
            <td>
            <td>
              <code style="background-color: transparent">
                ["if", false, ["addInt", 1, 2], ["addInt", 3, 5]]

      <br />
      <h4>iflet
      <br />
      <p>
        <code>iflet</code> is a special case to match against <code>Option</code> values.
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["iflet", &lt;var&gt;, &lt;expr&gt;, &lt;expr on some&gt;, &lt;expr on none&gt;]
            <td>
              <code style="background-color: transparent">
                ["iflet", "x", null, ["addInt", {"@":"x"}, 1], 1]
          <tr>
            <td>
            <td>
              <code style="background-color: transparent">
                ["iflet", "x", 10, ["addInt", {"@":"x"}, 1], 1]

      <br />
      <h4>fn
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["fn", [{&lt;var&gt;:&lt;type&gt;}, ...], &lt;expr&gt;]
            <td>
              <code style="background-color: transparent">
                [["fn", [{"x":"Int"}], ["addInt", 10, {"@":"x"}]], 100]

      <br />
      <h4>def
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["def", &lt;var&gt;, &lt;expr&gt;]
            <td>
              <code style="background-color: transparent">
                ["def", "ten", 10]
          <tr>
            <td>
            <td>
              <code style="background-color: transparent">
                ["def", "addTen", ["fn", [{"x":"Int"}], ["addInt", 10, {"@": "x"}]]]

      <br />
      <h4>do
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["do", &lt;expr&gt;, &lt;expr&gt;, ...]
            <td>
              <code style="background-color: transparent">
                ["do",<br />
                &nbsp;&nbsp;["def", "addTen", ["fn", [{"x":"Int"}], ["addInt", 10, {"@": "x"}]]],<br />
                &nbsp;&nbsp;["addTen", 20]]
      <br />
      <h4>match
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["match", &lt;expr&gt;, [[&lt;tag&gt;, &lt;expr&gt;], ...]]
            <td>
              <code style="background-color: transparent">
                ["match", {"tag":"Left","left":"words"},<br />
                &nbsp;&nbsp;["Left","x",{"@":"x"}],<br />
                &nbsp;&nbsp;["Right","x",{"@":"x"}]]


      <br />
      <br />
      <h4>get
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["get", ["member", ...], &lt;expr&gt;]
            <td>
              <code style="background-color: transparent">
                ["get", ["x","y"], {"x": {"y": 10}}]
      <br />
      <br />
      <h4>set
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["set", ["member", ...], &lt;src expr&gt;, &lt;dest expr&gt;]
            <td>
              <code style="background-color: transparent">
                ["set", ["x","y"], 20, {"x": {"y": 10}}]

      <br />
      <br />
      <h4>list
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["list", [&lt;x0&gt;, &lt;x1&gt;, &lt;x2&gt;, ...]]
            <td>
              <code style="background-color: transparent">
                ["list", [1,2,3,4,5,6,7,8,9,0]]

      <br />
      <h4>tuple
      <br />
      <table .table .table-striped .table-condensed .table-bordered>
        <thead>
          <tr>
            <th> Pattern
            <th> Example
        <tbody>
          <tr>
            <td>
              <code style="background-color: transparent">
                ["tuple", &lt;x0&gt;, &lt;x1&gt;, &lt;x2&gt;, ...]
            <td>
              <code style="background-color: transparent">
                ["tuple", 1, "two", 3]

      <br />
      <br />
      <h2> Schema Defined Functions
      <br />

      <br />
      <h4>Hollow
      <br />
      <br />

      <br />
      <h4>Wrap
      <br />
      <br />

      <br />
      <h4>Struct
      <br />
      <br />

      <br />
      <h4>Enumeration
      <br />
      <br />

      <br />
      <br />
